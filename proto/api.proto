syntax = "proto3";
package pb;
option go_package = "./pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "token.proto";
import "users.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Example API"
    version: ""
    contact: {
      name: "Support"
      url: "https://example.com"
    }
  }
  external_docs: {
    url: "http://example.com"
    description: "More about"
  }
  base_path: "/api"
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "Authorization";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization"
      }
    }
  },
  security: {
    security_requirement: {
      key: "Authorization";
      value: {}
    }
  },
  tags: [
    {
      description: "Authorization"
      name: "Auth"
    },
    {
      description: "Users"
      name: "Users"
    }
  ]
  responses: {
    key: "400"
    value: {
      description: "Bad Request.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Forbidden.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Not Found.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Internal Server Error.";
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
    }
  }
};

service Api {
  // Authorization
  rpc CreateToken(CreateTokenReq) returns (Token) {
    option (google.api.http) = {
      post: "/v1/auth/token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Auth"]
      responses: {
        key: "201"
        value: {
          description: "A successful response.";
          schema: {
            json_schema: {
              ref: ".pb.Token";
            }
          }
        }
      }
    };
  }
  // List Users
  rpc ListUsers(Ids) returns (Users) {
    option (google.api.http) = {
      get: "/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Users"]
      responses: {
        key: "200"
        value: {
          description: "A successful response.";
          schema: {
            json_schema: {
              ref: ".pb.Users";
            }
          }
        }
      }
    };
  }
  // Create User
  rpc CreateUser(CreateUserReq) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Users"]
      responses: {
        key: "201"
        value: {
          description: "A successful response.";
          schema: {
            json_schema: {
              ref: ".pb.User";
            }
          }
        }
      }
    };
  }
  // Get User
  rpc GetUser(Id) returns (User) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Users"]
      responses: {
        key: "200"
        value: {
          description: "A successful response.";
          schema: {
            json_schema: {
              ref: ".pb.User";
            }
          }
        }
      }
    };
  }
  // Update User Info
  rpc UpdateUser(UpdateUserReq) returns (User) {
    option (google.api.http) = {
      patch: "/v1/users/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Users"]
      responses: {
        key: "200"
        value: {
          description: "A successful response.";
          schema: {
            json_schema: {
              ref: ".pb.User";
            }
          }
        }
      }
    };
  }
  // Delete User
  rpc DeleteUser(Id) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["Users"]
      responses: {
        key: "204"
        value: {
          description: "A successful response.";
        }
      }
    };
  }
}
