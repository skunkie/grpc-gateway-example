// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/skunkie/grpc-gateway-example/pkg/httpclient/models"
)

// APIUpdateUserReader is a Reader for the APIUpdateUser structure.
type APIUpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *APIUpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAPIUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAPIUpdateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAPIUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAPIUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAPIUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAPIUpdateUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAPIUpdateUserOK creates a APIUpdateUserOK with default headers values
func NewAPIUpdateUserOK() *APIUpdateUserOK {
	return &APIUpdateUserOK{}
}

/*
APIUpdateUserOK describes a response with status code 200, with default header values.

A successful response.
*/
type APIUpdateUserOK struct {
	Payload *models.PbUser
}

// IsSuccess returns true when this api update user o k response has a 2xx status code
func (o *APIUpdateUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this api update user o k response has a 3xx status code
func (o *APIUpdateUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this api update user o k response has a 4xx status code
func (o *APIUpdateUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this api update user o k response has a 5xx status code
func (o *APIUpdateUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this api update user o k response a status code equal to that given
func (o *APIUpdateUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the api update user o k response
func (o *APIUpdateUserOK) Code() int {
	return 200
}

func (o *APIUpdateUserOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserOK  %+v", 200, o.Payload)
}

func (o *APIUpdateUserOK) String() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserOK  %+v", 200, o.Payload)
}

func (o *APIUpdateUserOK) GetPayload() *models.PbUser {
	return o.Payload
}

func (o *APIUpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PbUser)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateUserBadRequest creates a APIUpdateUserBadRequest with default headers values
func NewAPIUpdateUserBadRequest() *APIUpdateUserBadRequest {
	return &APIUpdateUserBadRequest{}
}

/*
APIUpdateUserBadRequest describes a response with status code 400, with default header values.

Bad Request.
*/
type APIUpdateUserBadRequest struct {
	Payload *models.RPCStatus
}

// IsSuccess returns true when this api update user bad request response has a 2xx status code
func (o *APIUpdateUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this api update user bad request response has a 3xx status code
func (o *APIUpdateUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this api update user bad request response has a 4xx status code
func (o *APIUpdateUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this api update user bad request response has a 5xx status code
func (o *APIUpdateUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this api update user bad request response a status code equal to that given
func (o *APIUpdateUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the api update user bad request response
func (o *APIUpdateUserBadRequest) Code() int {
	return 400
}

func (o *APIUpdateUserBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserBadRequest  %+v", 400, o.Payload)
}

func (o *APIUpdateUserBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserBadRequest  %+v", 400, o.Payload)
}

func (o *APIUpdateUserBadRequest) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *APIUpdateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateUserForbidden creates a APIUpdateUserForbidden with default headers values
func NewAPIUpdateUserForbidden() *APIUpdateUserForbidden {
	return &APIUpdateUserForbidden{}
}

/*
APIUpdateUserForbidden describes a response with status code 403, with default header values.

Forbidden.
*/
type APIUpdateUserForbidden struct {
	Payload *models.RPCStatus
}

// IsSuccess returns true when this api update user forbidden response has a 2xx status code
func (o *APIUpdateUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this api update user forbidden response has a 3xx status code
func (o *APIUpdateUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this api update user forbidden response has a 4xx status code
func (o *APIUpdateUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this api update user forbidden response has a 5xx status code
func (o *APIUpdateUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this api update user forbidden response a status code equal to that given
func (o *APIUpdateUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the api update user forbidden response
func (o *APIUpdateUserForbidden) Code() int {
	return 403
}

func (o *APIUpdateUserForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *APIUpdateUserForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *APIUpdateUserForbidden) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *APIUpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateUserNotFound creates a APIUpdateUserNotFound with default headers values
func NewAPIUpdateUserNotFound() *APIUpdateUserNotFound {
	return &APIUpdateUserNotFound{}
}

/*
APIUpdateUserNotFound describes a response with status code 404, with default header values.

Not Found.
*/
type APIUpdateUserNotFound struct {
	Payload *models.RPCStatus
}

// IsSuccess returns true when this api update user not found response has a 2xx status code
func (o *APIUpdateUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this api update user not found response has a 3xx status code
func (o *APIUpdateUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this api update user not found response has a 4xx status code
func (o *APIUpdateUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this api update user not found response has a 5xx status code
func (o *APIUpdateUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this api update user not found response a status code equal to that given
func (o *APIUpdateUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the api update user not found response
func (o *APIUpdateUserNotFound) Code() int {
	return 404
}

func (o *APIUpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserNotFound  %+v", 404, o.Payload)
}

func (o *APIUpdateUserNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserNotFound  %+v", 404, o.Payload)
}

func (o *APIUpdateUserNotFound) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *APIUpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateUserInternalServerError creates a APIUpdateUserInternalServerError with default headers values
func NewAPIUpdateUserInternalServerError() *APIUpdateUserInternalServerError {
	return &APIUpdateUserInternalServerError{}
}

/*
APIUpdateUserInternalServerError describes a response with status code 500, with default header values.

Internal Server Error.
*/
type APIUpdateUserInternalServerError struct {
	Payload *models.RPCStatus
}

// IsSuccess returns true when this api update user internal server error response has a 2xx status code
func (o *APIUpdateUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this api update user internal server error response has a 3xx status code
func (o *APIUpdateUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this api update user internal server error response has a 4xx status code
func (o *APIUpdateUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this api update user internal server error response has a 5xx status code
func (o *APIUpdateUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this api update user internal server error response a status code equal to that given
func (o *APIUpdateUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the api update user internal server error response
func (o *APIUpdateUserInternalServerError) Code() int {
	return 500
}

func (o *APIUpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *APIUpdateUserInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] apiUpdateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *APIUpdateUserInternalServerError) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *APIUpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIUpdateUserDefault creates a APIUpdateUserDefault with default headers values
func NewAPIUpdateUserDefault(code int) *APIUpdateUserDefault {
	return &APIUpdateUserDefault{
		_statusCode: code,
	}
}

/*
APIUpdateUserDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type APIUpdateUserDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this Api update user default response has a 2xx status code
func (o *APIUpdateUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this Api update user default response has a 3xx status code
func (o *APIUpdateUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this Api update user default response has a 4xx status code
func (o *APIUpdateUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this Api update user default response has a 5xx status code
func (o *APIUpdateUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this Api update user default response a status code equal to that given
func (o *APIUpdateUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the Api update user default response
func (o *APIUpdateUserDefault) Code() int {
	return o._statusCode
}

func (o *APIUpdateUserDefault) Error() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] Api_UpdateUser default  %+v", o._statusCode, o.Payload)
}

func (o *APIUpdateUserDefault) String() string {
	return fmt.Sprintf("[PATCH /v1/users/{id}][%d] Api_UpdateUser default  %+v", o._statusCode, o.Payload)
}

func (o *APIUpdateUserDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *APIUpdateUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
APIUpdateUserBody API update user body
swagger:model APIUpdateUserBody
*/
type APIUpdateUserBody struct {

	// Email
	// Example: username@example.com
	Email string `json:"email,omitempty"`

	// Name
	// Example: username
	Name string `json:"name,omitempty"`
}

// Validate validates this API update user body
func (o *APIUpdateUserBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this API update user body based on context it is used
func (o *APIUpdateUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *APIUpdateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *APIUpdateUserBody) UnmarshalBinary(b []byte) error {
	var res APIUpdateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
